from __future__ import unicode_literals

from django.db import models
from django.contrib.auth.models import User, Group
from django.db.models.signals import post_save
from django.dispatch import receiver
import random, string

# =======================================================================================================
class Profile(models.Model):
    """
    An extension of the built-in Django user model to allow for the different
    types of users
    """
    USER_TYPES = (
        ('S', 'Student'),
        ('I', 'Instructor'),
        ('C', 'Client')
    )
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    user_type = models.CharField(max_length=1, choices=USER_TYPES)
    section_id = models.IntegerField(null=True)

# These methods are for linking the Profile model with Django built-in User model for authentication
# Reference: https://simpleisbetterthancomplex.com/tutorial/2016/07/22/how-to-extend-django-user-model.html
@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)

@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    instance.profile.save()
# ========================================================================================================


class Project(models.Model):
    """
    A model object representing a client-submitted project.
    """
    name = models.CharField(max_length=255)
    requirements = models.CharField(max_length=255)
    keywords = models.CharField(max_length=255)
    description = models.CharField(max_length=255)
    client = models.ForeignKey(User, on_delete=models.CASCADE)
    is_approved = models.BooleanField() # defaults to false


class Question(models.Model):
    """
    Represents a question that students can submit on project pages
    """
    text = models.CharField(max_length=255)
    project = models.ForeignKey(Project, on_delete=models.CASCADE) # project the question was asked on
    asker = models.ForeignKey(User, on_delete=models.CASCADE) # The student asking the question
    reply = models.CharField(max_length=255) # initially blank until client fills out a reply


class Section(models.Model):
    """
    Represents a class section (i.e CS 3312 JDA, JDB, JDC, JDD)
    Students and instructors are associated with sections, which allows the correct instructors to see
    the students bids
    """
    name = models.CharField(max_length=255)
    students = models.ManyToManyField(User, related_name="students_for_section")

class Message(models.Model):
    """
    Represents a message that students / instructors can send to each other
    """
    sender = models.ForeignKey(User, on_delete=models.CASCADE, related_name="sender")
    recipient = models.ForeignKey(User, on_delete=models.CASCADE, related_name="recipient")
    subject = models.CharField(max_length=255)
    text = models.TextField()


class Bid(models.Model):
    """
    Represents a bid.
    The bid is only associated with the submitter of the bid, rather than every person in a group, so
    the accept/reject notification will only show up to the submitter (i.e the "leader" of the group)
    """
    team_members = models.CharField(max_length=255)
    description = models.CharField(max_length=255)
    is_approved = models.BooleanField()
    project = models.ForeignKey(Project, on_delete=models.CASCADE) # For (Bid <-> Project) ; many to one
    student = models.ForeignKey(User, on_delete=models.CASCADE)
    instructors = models.ManyToManyField(User, related_name="instructors_for_bid")


class Notification(models.Model):
    """
    Represents a notification, which is distinct from a message in that it does not have a sender
    and these are generated by the application (instead of from other users) for events such as
    * a clients project is rejected by an instructor
    * a bid is awarded / denied
    """
    recipient = models.ForeignKey(User, on_delete=models.CASCADE, related_name="notification_recipient")
    subject = models.CharField(max_length=255)
    text = models.TextField()

# TODO: Change where we put this, maybe in another file
def random_key():
        length = random.randrange(20)
        return ''.join(random.choice(string.ascii_letters + string.digits) for i in range(length))

class InstructorKey(models.Model):
    """
    Represents an Instructor Key used by instructors to create a section
    """
    key = models.CharField(max_length=255, default=random_key, unique=True)

class Tag(models.Model):
    name = models.CharField(max_length=255)
    students = models.ManyToManyField(User, related_name="students_for_tag")